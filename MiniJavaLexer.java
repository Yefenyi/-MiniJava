// Generated from MiniJava.g4 by ANTLR 4.0
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MiniJavaLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__31=1, T__30=2, T__29=3, T__28=4, T__27=5, T__26=6, T__25=7, T__24=8, 
		T__23=9, T__22=10, T__21=11, T__20=12, T__19=13, T__18=14, T__17=15, T__16=16, 
		T__15=17, T__14=18, T__13=19, T__12=20, T__11=21, T__10=22, T__9=23, T__8=24, 
		T__7=25, T__6=26, T__5=27, T__4=28, T__3=29, T__2=30, T__1=31, T__0=32, 
		INT=33, DIGIT=34, UNDERSCORE=35, LETTER=36, ADD_MINUS=37, AND=38, WS=39;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'main'", "'length'", "'return'", "'new'", "'true'", "'class'", "'void'", 
		"';'", "'while'", "'{'", "'extends'", "'='", "'}'", "'if'", "'int'", "'('", 
		"'*'", "','", "'this'", "'.'", "'false'", "'boolean'", "'System.out.println'", 
		"'['", "'String'", "'public'", "']'", "'>'", "'!'", "'static'", "'else'", 
		"')'", "INT", "DIGIT", "'_'", "LETTER", "ADD_MINUS", "'&&'", "WS"
	};
	public static final String[] ruleNames = {
		"T__31", "T__30", "T__29", "T__28", "T__27", "T__26", "T__25", "T__24", 
		"T__23", "T__22", "T__21", "T__20", "T__19", "T__18", "T__17", "T__16", 
		"T__15", "T__14", "T__13", "T__12", "T__11", "T__10", "T__9", "T__8", 
		"T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "INT", 
		"DIGIT", "UNDERSCORE", "LETTER", "ADD_MINUS", "AND", "WS"
	};


	public MiniJavaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MiniJava.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 38: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\2\4)\u0105\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t"+
		"\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20"+
		"\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27"+
		"\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36"+
		"\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4"+
		"(\t(\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3"+
		"\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3"+
		"\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3\"\5\"\u00e9\n"+
		"\"\3\"\3\"\6\"\u00ed\n\"\r\"\16\"\u00ee\3\"\5\"\u00f2\n\"\3#\3#\3$\3$"+
		"\3%\3%\3&\3&\3\'\3\'\3\'\3(\6(\u0100\n(\r(\16(\u0101\3(\3(\2)\3\3\1\5"+
		"\4\1\7\5\1\t\6\1\13\7\1\r\b\1\17\t\1\21\n\1\23\13\1\25\f\1\27\r\1\31\16"+
		"\1\33\17\1\35\20\1\37\21\1!\22\1#\23\1%\24\1\'\25\1)\26\1+\27\1-\30\1"+
		"/\31\1\61\32\1\63\33\1\65\34\1\67\35\19\36\1;\37\1= \1?!\1A\"\1C#\1E$"+
		"\1G%\1I&\1K\'\1M(\1O)\2\3\2\t\3\63;\3\62;\3\62;\3\62;\4C\\c|\4--//\5\13"+
		"\f\17\17\"\"\u0108\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E"+
		"\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\3Q\3\2"+
		"\2\2\5V\3\2\2\2\7]\3\2\2\2\td\3\2\2\2\13h\3\2\2\2\rm\3\2\2\2\17s\3\2\2"+
		"\2\21x\3\2\2\2\23z\3\2\2\2\25\u0080\3\2\2\2\27\u0082\3\2\2\2\31\u008a"+
		"\3\2\2\2\33\u008c\3\2\2\2\35\u008e\3\2\2\2\37\u0091\3\2\2\2!\u0095\3\2"+
		"\2\2#\u0097\3\2\2\2%\u0099\3\2\2\2\'\u009b\3\2\2\2)\u00a0\3\2\2\2+\u00a2"+
		"\3\2\2\2-\u00a8\3\2\2\2/\u00b0\3\2\2\2\61\u00c3\3\2\2\2\63\u00c5\3\2\2"+
		"\2\65\u00cc\3\2\2\2\67\u00d3\3\2\2\29\u00d5\3\2\2\2;\u00d7\3\2\2\2=\u00d9"+
		"\3\2\2\2?\u00e0\3\2\2\2A\u00e5\3\2\2\2C\u00f1\3\2\2\2E\u00f3\3\2\2\2G"+
		"\u00f5\3\2\2\2I\u00f7\3\2\2\2K\u00f9\3\2\2\2M\u00fb\3\2\2\2O\u00ff\3\2"+
		"\2\2QR\7o\2\2RS\7c\2\2ST\7k\2\2TU\7p\2\2U\4\3\2\2\2VW\7n\2\2WX\7g\2\2"+
		"XY\7p\2\2YZ\7i\2\2Z[\7v\2\2[\\\7j\2\2\\\6\3\2\2\2]^\7t\2\2^_\7g\2\2_`"+
		"\7v\2\2`a\7w\2\2ab\7t\2\2bc\7p\2\2c\b\3\2\2\2de\7p\2\2ef\7g\2\2fg\7y\2"+
		"\2g\n\3\2\2\2hi\7v\2\2ij\7t\2\2jk\7w\2\2kl\7g\2\2l\f\3\2\2\2mn\7e\2\2"+
		"no\7n\2\2op\7c\2\2pq\7u\2\2qr\7u\2\2r\16\3\2\2\2st\7x\2\2tu\7q\2\2uv\7"+
		"k\2\2vw\7f\2\2w\20\3\2\2\2xy\7=\2\2y\22\3\2\2\2z{\7y\2\2{|\7j\2\2|}\7"+
		"k\2\2}~\7n\2\2~\177\7g\2\2\177\24\3\2\2\2\u0080\u0081\7}\2\2\u0081\26"+
		"\3\2\2\2\u0082\u0083\7g\2\2\u0083\u0084\7z\2\2\u0084\u0085\7v\2\2\u0085"+
		"\u0086\7g\2\2\u0086\u0087\7p\2\2\u0087\u0088\7f\2\2\u0088\u0089\7u\2\2"+
		"\u0089\30\3\2\2\2\u008a\u008b\7?\2\2\u008b\32\3\2\2\2\u008c\u008d\7\177"+
		"\2\2\u008d\34\3\2\2\2\u008e\u008f\7k\2\2\u008f\u0090\7h\2\2\u0090\36\3"+
		"\2\2\2\u0091\u0092\7k\2\2\u0092\u0093\7p\2\2\u0093\u0094\7v\2\2\u0094"+
		" \3\2\2\2\u0095\u0096\7*\2\2\u0096\"\3\2\2\2\u0097\u0098\7,\2\2\u0098"+
		"$\3\2\2\2\u0099\u009a\7.\2\2\u009a&\3\2\2\2\u009b\u009c\7v\2\2\u009c\u009d"+
		"\7j\2\2\u009d\u009e\7k\2\2\u009e\u009f\7u\2\2\u009f(\3\2\2\2\u00a0\u00a1"+
		"\7\60\2\2\u00a1*\3\2\2\2\u00a2\u00a3\7h\2\2\u00a3\u00a4\7c\2\2\u00a4\u00a5"+
		"\7n\2\2\u00a5\u00a6\7u\2\2\u00a6\u00a7\7g\2\2\u00a7,\3\2\2\2\u00a8\u00a9"+
		"\7d\2\2\u00a9\u00aa\7q\2\2\u00aa\u00ab\7q\2\2\u00ab\u00ac\7n\2\2\u00ac"+
		"\u00ad\7g\2\2\u00ad\u00ae\7c\2\2\u00ae\u00af\7p\2\2\u00af.\3\2\2\2\u00b0"+
		"\u00b1\7U\2\2\u00b1\u00b2\7{\2\2\u00b2\u00b3\7u\2\2\u00b3\u00b4\7v\2\2"+
		"\u00b4\u00b5\7g\2\2\u00b5\u00b6\7o\2\2\u00b6\u00b7\7\60\2\2\u00b7\u00b8"+
		"\7q\2\2\u00b8\u00b9\7w\2\2\u00b9\u00ba\7v\2\2\u00ba\u00bb\7\60\2\2\u00bb"+
		"\u00bc\7r\2\2\u00bc\u00bd\7t\2\2\u00bd\u00be\7k\2\2\u00be\u00bf\7p\2\2"+
		"\u00bf\u00c0\7v\2\2\u00c0\u00c1\7n\2\2\u00c1\u00c2\7p\2\2\u00c2\60\3\2"+
		"\2\2\u00c3\u00c4\7]\2\2\u00c4\62\3\2\2\2\u00c5\u00c6\7U\2\2\u00c6\u00c7"+
		"\7v\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9\7k\2\2\u00c9\u00ca\7p\2\2\u00ca"+
		"\u00cb\7i\2\2\u00cb\64\3\2\2\2\u00cc\u00cd\7r\2\2\u00cd\u00ce\7w\2\2\u00ce"+
		"\u00cf\7d\2\2\u00cf\u00d0\7n\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2\7e\2\2"+
		"\u00d2\66\3\2\2\2\u00d3\u00d4\7_\2\2\u00d48\3\2\2\2\u00d5\u00d6\7@\2\2"+
		"\u00d6:\3\2\2\2\u00d7\u00d8\7#\2\2\u00d8<\3\2\2\2\u00d9\u00da\7u\2\2\u00da"+
		"\u00db\7v\2\2\u00db\u00dc\7c\2\2\u00dc\u00dd\7v\2\2\u00dd\u00de\7k\2\2"+
		"\u00de\u00df\7e\2\2\u00df>\3\2\2\2\u00e0\u00e1\7g\2\2\u00e1\u00e2\7n\2"+
		"\2\u00e2\u00e3\7u\2\2\u00e3\u00e4\7g\2\2\u00e4@\3\2\2\2\u00e5\u00e6\7"+
		"+\2\2\u00e6B\3\2\2\2\u00e7\u00e9\7/\2\2\u00e8\u00e7\3\2\2\2\u00e8\u00e9"+
		"\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea\u00ec\t\2\2\2\u00eb\u00ed\t\3\2\2\u00ec"+
		"\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ee\u00ef\3\2"+
		"\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00f2\t\4\2\2\u00f1\u00e8\3\2\2\2\u00f1"+
		"\u00f0\3\2\2\2\u00f2D\3\2\2\2\u00f3\u00f4\t\5\2\2\u00f4F\3\2\2\2\u00f5"+
		"\u00f6\7a\2\2\u00f6H\3\2\2\2\u00f7\u00f8\t\6\2\2\u00f8J\3\2\2\2\u00f9"+
		"\u00fa\t\7\2\2\u00faL\3\2\2\2\u00fb\u00fc\7(\2\2\u00fc\u00fd\7(\2\2\u00fd"+
		"N\3\2\2\2\u00fe\u0100\t\b\2\2\u00ff\u00fe\3\2\2\2\u0100\u0101\3\2\2\2"+
		"\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0104"+
		"\b(\2\2\u0104P\3\2\2\2\7\2\u00e8\u00ee\u00f1\u0101";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
	}
}